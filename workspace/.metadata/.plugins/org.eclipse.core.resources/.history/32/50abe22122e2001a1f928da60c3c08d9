/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

/* UG871: Chapter 10, HLS MACC */


#include <stdio.h>



#include "xgpio.h"
#include "xil_io.h"
//#include "_parameter_maps.h"
#include "xparameters.h"
#include "mod_led.h"
#include "_macros_print.h"

// XPAR_MOD_LED_CONTROLS_AXI_GPIO_BASEADDR
// XPAR_MOD_LED_CONTROLS_AXI_GPIO_DEVICE_ID


#define LED_DELAY 10000000
#define LED_CHANNEL 1

XGpio instGpioLed;


int mod_led_init() {
	int lStatus= XST_SUCCESS;
	DEBUG_PRINT_ENTER("");

    lStatus+= XGpio_Initialize(&instGpioLed, XPAR_GPIO_DEVICE_ID);
    DEBUG_PRINT_LOG_STATUS_CHK_ERR(lStatus, "GPIO Initialization");

	/* Direction all outputs */
    //lStatus+= XGpio_SelfTest(&instGpioLed);

	XGpio_SetDataDirection(&instGpioLed, LED_CHANNEL, 0);

	DEBUG_PRINT_LOG_STATUS_RETURN(lStatus, "");

	return(lStatus);
}



/* Flashes 2 x LEDs, simple test to see that the fabric logic is program and running */
int mod_led_test() {
	int lStatus= 0;
	volatile int Delay;
	volatile int lCountDown= 6;

	DEBUG_PRINT_DASH();
    DEBUG_PRINT_ENTER("");
	DEBUG_PRINT_DASH();

	while (lCountDown > 0) {
		XGpio_DiscreteWrite(&instGpioLed, LED_CHANNEL, 0x03);
		for (Delay = 0; Delay < LED_DELAY; Delay++);
		XGpio_DiscreteClear(&instGpioLed, LED_CHANNEL, 0x03);
		for (Delay = 0; Delay < LED_DELAY; Delay++);

		//mod_led_print();

		XGpio_DiscreteWrite(&instGpioLed, LED_CHANNEL, 0x02);
		for (Delay = 0; Delay < LED_DELAY; Delay++);
		XGpio_DiscreteClear(&instGpioLed, LED_CHANNEL, 0x03);
		for (Delay = 0; Delay < LED_DELAY; Delay++);

		//mod_led_print();

		XGpio_DiscreteWrite(&instGpioLed, LED_CHANNEL, 0x01);
		for (Delay = 0; Delay < LED_DELAY; Delay++);
		XGpio_DiscreteClear(&instGpioLed, LED_CHANNEL, 0x03);
		for (Delay = 0; Delay < LED_DELAY; Delay++);

		//mod_led_print();

		XGpio_DiscreteWrite(&instGpioLed, LED_CHANNEL, 0x00);
		for (Delay = 0; Delay < LED_DELAY; Delay++);
		XGpio_DiscreteClear(&instGpioLed, LED_CHANNEL, 0x03);
		for (Delay = 0; Delay < LED_DELAY; Delay++);

		//mod_led_print();

		lCountDown--;
	}

	DEBUG_PRINT_LOG_STATUS_RETURN(lStatus, "");

	return(lStatus);
}


/* Used for debug only */
int mod_led_print() {
	int lStatus= 0;
	volatile uint32_t uiRead;

	DEBUG_PRINT_DASH();
	uiRead= Xil_In32(XPAR_GPIO_BASEADDR + 0);
    xil_printf("READ: Address= %x Data= %x \n\r", XPAR_GPIO_BASEADDR+0, uiRead);
	uiRead= Xil_In32(XPAR_GPIO_BASEADDR+4);
    xil_printf("READ: Address= %x Data= %x \n\r", XPAR_GPIO_BASEADDR+4, uiRead);
	uiRead= Xil_In32(XPAR_GPIO_BASEADDR+8);
    xil_printf("READ: Address= %x Data= %x \n\r", XPAR_GPIO_BASEADDR+8, uiRead);
	uiRead= Xil_In32(XPAR_GPIO_BASEADDR+12);
    xil_printf("READ: Address= %x Data= %x \n\r", XPAR_GPIO_BASEADDR+12, uiRead);

	return(lStatus);
}
